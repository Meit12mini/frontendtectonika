// src/services/geminiService.ts
import type { Answers, GeminiResponse } from '../types';

export const processLead = async (answers: Answers, phone: string): Promise<GeminiResponse> => {
  try {
    const response = await fetch('https://backendtectonika.onrender.com/api/lead', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ answers, phone })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    const data = await response.json();
    return data as GeminiResponse;

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –±—ç–∫:', error);
    throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É');
  }
};


// import { GoogleGenAI, Type } from "@google/genai";
// import type { Answers, GeminiResponse } from '../types';

// const responseSchema = {
//     type: Type.OBJECT,
//     properties: {
//         leadStatus: {
//             type: Type.STRING,
//             description: "–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞: 'üî• –ì–û–†–Ø–ß–ò–ô', 'üëç –¢–ï–ü–õ–´–ô', –∏–ª–∏ '‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô'",
//             enum: ['üî• –ì–û–†–Ø–ß–ò–ô', 'üëç –¢–ï–ü–õ–´–ô', '‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô'],
//         },
//         telegramMessage: {
//             type: Type.STRING,
//             description: "–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram-—á–∞—Ç–∞ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂. –î–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–≤–∏–∑ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å.",
//         },
//         clientMessage: {
//             type: Type.STRING,
//             description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ WhatsApp –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞.",
//         },
//         googleSheetRow: {
//             type: Type.ARRAY,
//             items: { type: Type.STRING },
//             description: "–ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: [–î–∞—Ç–∞, –¢–µ–ª–µ—Ñ–æ–Ω, –°—Ç–∞—Ç—É—Å, –û—Ç–≤–µ—Ç1, –û—Ç–≤–µ—Ç2, ..., UTM Source]",
//         },
//     },
//     required: ["leadStatus", "telegramMessage", "clientMessage", "googleSheetRow"],
// };

// const getSystemInstruction = () => {
//   return `–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–¢–µ–∫—Ç–æ–Ω–∏–∫–∞¬ª. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –∫–≤–∏–∑-—Å–∞–π—Ç–∞.

//   –í–æ—Ç —Ç–≤–æ–∏ —à–∞–≥–∏:
//   1.  **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã**: –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±—é–¥–∂–µ—Ç–µ –∏ —Å—Ä–æ–∫–∞—Ö.
//   2.  **–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–π –ª–∏–¥–∞**:
//       *   –ü—Ä–∏—Å–≤–æ–π —Å—Ç–∞—Ç—É—Å "üî• –ì–û–†–Ø–ß–ò–ô", –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç > 5 –º–ª–Ω ‚ÇΩ –ò–õ–ò —Å—Ä–æ–∫–∏ "–í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü".
//       *   –ü—Ä–∏—Å–≤–æ–π —Å—Ç–∞—Ç—É—Å "üëç –¢–ï–ü–õ–´–ô", –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç —Å—Ä–µ–¥–Ω–∏–π (3-5 –º–ª–Ω ‚ÇΩ) –ò–õ–ò —Å—Ä–æ–∫–∏ —Å—Ä–µ–¥–Ω–∏–µ (3-6 –º–µ—Å—è—Ü–µ–≤).
//       *   –ü—Ä–∏—Å–≤–æ–π —Å—Ç–∞—Ç—É—Å "‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô" –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.
//   3.  **–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram**: –°–æ–∑–¥–∞–π —á–µ—Ç–∫–æ–µ, —Ö–æ—Ä–æ—à–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–∞—Ç–∞ "–ù–æ–≤—ã–µ –ó–∞—è–≤–∫–∏ | –¢–µ–∫—Ç–æ–Ω–∏–∫–∞". –û–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ –∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
//   4.  **–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞**:
//       *   –î–ª—è "üî• –ì–û–†–Ø–ß–ò–ô": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–∏–ª–∞ VIP-—Å—Ç–∞—Ç—É—Å. –ù–∞—à –ª—É—á—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ ¬´–¢–µ–∫—Ç–æ–Ω–∏–∫–∞¬ª."
//       *   –î–ª—è "üëç –¢–ï–ü–õ–´–ô" –∏ "‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ê –ø–æ–∫–∞ –º—ã –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å —Å–º–µ—Ç—É –∏ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ ¬´–¢–µ–∫—Ç–æ–Ω–∏–∫–∞¬ª."
//   5.  **–ü–æ–¥–≥–æ—Ç–æ–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets**: –°—Ñ–æ—Ä–º–∏—Ä—É–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.
  
//   –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ.`;
// };


// export const processLead = async (answers: Answers, phone: string): Promise<GeminiResponse> => {
//     if (!process.env.API_KEY) {
//       throw new Error("API_KEY environment variable is not set.");
//     }
//     const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

//     const prompt = `
//     –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ–º–∞.
//     –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
//     - –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
//     - UTM-–º–µ—Ç–∫–∏: (–Ω–µ —É–∫–∞–∑–∞–Ω—ã)

//     –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–≤–∏–∑:
//     1. –î–ª—è –∫–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç—å: ${answers[1]}
//     2. –ù–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–∫–∞: ${answers[2]}
//     3. –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞: ${answers[3]}
//     4. –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω: ${answers[4]}
//     5. –ë—é–¥–∂–µ—Ç: ${answers[5]}
//     6. –°—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ${answers[6]}

//     –û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç—É –∑–∞—è–≤–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
//     `;

//     try {
//         const response = await ai.models.generateContent({
//             model: "gemini-2.5-flash",
//             contents: prompt,
//             config: {
//                 systemInstruction: getSystemInstruction(),
//                 responseMimeType: "application/json",
//                 responseSchema: responseSchema,
//             },
//         });

//         const jsonText = response.text.trim();
//         const result = JSON.parse(jsonText) as GeminiResponse;
//         return result;

//     } catch (error) {
//         console.error("Error processing lead with Gemini:", error);
//         throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
//     }
// };